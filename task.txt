
Сроки?

В данном тестовом задании нет ограничения по времени, но чем быстрее вы его сделаете, тем будет лучше. Лучше выполнить задание быстрее, ведь вакансия уже через несколько дней может быть закрыта.

Что на этой картинке?

Представьте себе интернет-магазин, в котором продается различные товары: ноутбуки, мониторы, телефоны, системные блоки, часы, микрофоны.

Любой человек может зайти на сайт магазина, и оформить заказ на несколько товаров магазина. Например, вы можете сделать заказ, в котором будет 2 ноутбука и 1 телефон.

Также представьте, что у вас есть склад, на котором стоят стеллажи. И на этих стеллажах лежат товары. Например, на стеллаже А лежат ноутбуки и мониторы. На стеллаже Б лежат мобильные телефоны. Названия стеллажей могут быть не уникальными, то есть вполне возможна ситуация, когда будет 2 разных стеллажа А.

У каждого товара может быть несколько стеллажей, на которых лежит этот товар. Один из этих стеллажей главный, а остальные второстепенные. Например, мобильные телефоны лежат на стеллажах Б, З, В, причем Б это главный стеллаж для телефонов.

На картинке выше изображена страница сборки сразу нескольких заказов. Эта страница нужна человеку, кто будет собирать заказы, для того чтобы поменьше ходить между стеллажами в процессе сборки сразу нескольких заказов.

На вход этой страницы подаются некие номера заказов. Например заказы номер 10, 11, 14, 15. И после этого на странице показываются товары из этих заказов, сгруппированные по главным стеллажам.


Задание:

С целью упрощения тестового задания, интерфейс этой программы можно сделать в виде консольного приложения.

Нужно сделать следующее:

1. Надо создать таблицы в бд (например postgres, mysql, или в любой другой БД установленной на вашем компьютере).

Таблицы бд должны быть правильно спроектированы - так, как будто они создаются для реального бекенда магазина (нужны примерно 4 таблицы только под данные нужные для вывода данной задачи).
Данные в таблицах не должны: дублироваться, не оптимальным образом потреблять дисковое пространство.
Нужно чтобы в будущем на этой схеме бд можно было легко реализовать другой функционал, например показ списка заказов содержащих товар с id=5, или показ всех товаров, содержащих в названии поисковую фразу.

Большинство кандидатов, решающих это тестовое задание, делают схему бд такой, чтобы задание было удобно решить, вместо того чтобы сделать схему бд правильной с точки зрения бекенда интернет-магазина.
Это самая распространенная ошибка при выполнении этого задания.

2. Сделать вручную insert into в эти таблицы, так чтобы там были такие данные, чтобы получилось в точности воспроизвести пример ниже.

3. Написать консольную программу. (например на go, или на другом языке который вы знаете)
На вход программе подаются номера заказов, для которых надо выдать товары по стеллажам.
Программа должна выполняться эффективным образом. Не нагружать попусту процессор, и не использовать больше чем нужно оперативной памяти.
При этом надо, чтобы программа работала эффективно, даже если в таблицах бд будет по 200 млн записей.

4. Прислать по whatsapp: текст вашей программы (ссылку на github!), схему таблиц бд, и скриншот записка программы из консоли для 10,11,14,15, чтобы мы убедились, что выдается то же самое, что и в программе go run main.go 10,11,14,15 ниже.

Пример того, что как должна работать ваша программа:

Предположим, мы создали таблицы бд, сделали в них insert данных, и потом написали программу, решающую задачу из тестового задания.
Запускаем программу с входными номерами заказов 10,11,14,15.
И на выходе у вас должны обязательно выдаваться следующие данные:
> go run main.go 10,11,14,15
=+=+=+=
Страница сборки заказов 10,11,14,15

===Стеллаж А
Ноутбук (id=1)
заказ 10, 2 шт

Телевизор (id=2)
заказ 11, 3 шт

Ноутбук (id=1)
заказ 14, 3 шт

===Стеллаж Б
Телефон (id=3)
заказ 10, 1 шт
доп стеллаж: З,В

===Стеллаж Ж
Системный блок (id=4)
заказ 14, 4 шт

Часы
заказ 15, 1 шт (id=5)
доп стеллаж: А

Микрофон (id=6)
заказ 10, 1 шт



----------------------------------------------------------
solution:


package main

import (
  "database/sql"
  "fmt"
  "log"
  "os"
  "strconv"
  "strings"

  _ "github.com/go-sql-driver/mysql"
)

func main() {
  // Подключение к БД
  db, err := sql.Open("mysql", "user:password@tcp(127.0.0.1:3306)/database")
  if err != nil {
    log.Fatal(err)
  }
  defer db.Close()

  // Проверка аргументов командной строки
  if len(os.Args) < 2 {
    fmt.Println("Usage: go run main.go <order_numbers>")
    os.Exit(1)
  }

  // Получение номеров заказов из аргументов командной строки
  orderNumbers := strings.Split(os.Args[1], ",")
  for _, orderNumber := range orderNumbers {
    // Запрос данных из БД
    rows, err := db.Query(`
      SELECT Товары.название, Товары.id, Склад.название_стеллажа, COUNT(*) as количество
      FROM Заказы
      INNER JOIN "Связь Заказы-Товары" ON Заказы.id = "Связь Заказы-Товары".id_заказа
      INNER JOIN Товары ON "Связь Заказы-Товары".id_товара = Товары.id
      INNER JOIN Склад ON Товары.id = Склад.id_товара
      WHERE Заказы.id = ?
      GROUP BY Товары.название, Товары.id, Склад.название_стеллажа
    `, orderNumber)
    if err != nil {
log.Fatal(err)
    }
    defer rows.Close()

    // Вывод данных по стеллажам для каждого товара из заказа
    fmt.Printf("=+=+=+=\nСтраница сборки заказа %s\n\n", orderNumber)
    for rows.Next() {
      var название, стеллаж string
      var id, количество int
      err := rows.Scan(&название, &id, &стеллаж, &количество)
      if err != nil {
        log.Fatal(err)
      }
      fmt.Printf("===Стеллаж %s\n%s (id=%d)\nзаказ %s, %d шт\n\n", стеллаж, название, id, orderNumber, количество)
    }
    if err := rows.Err(); err != nil {
      log.Fatal(err)
    }
  }
}

